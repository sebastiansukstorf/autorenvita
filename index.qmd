---
title: "Autorenvita Sebastian Sukstorf"
lang: de
about:
  template: jolla           # einspaltig
  image: sebastian.jpg
  image-alt: "Sebastian Sukstorf"
  image-shape: round
  links:
    - icon: instagram
      text: Instagram
      href: https://www.instagram.com/sukstorfsebastian/
    - icon: youtube
      text: YouTube
      href: https://www.youtube.com/@SSukstorf

format:
  html:
    toc: false
    embed-resources: true
    include-in-header:
      text: |
        <meta name="robots" content="noindex,nofollow">
        <style>
          main.content{max-width:820px;margin:0 auto;padding:0 1rem}
          p.bio{text-align:justify;margin-bottom:2rem}
          .muted{color:#666;font-size:.9em}
          table{border-collapse:collapse;width:100%}
          th,td{padding:.5rem;border-bottom:1px solid #ddd;vertical-align:top}
          th{cursor:pointer;user-select:none;white-space:nowrap}
        </style>
---

<p class="bio">
Sebastian Sukstorf ist Autor und Erzähler. In seinen Texten verbindet er Alltagsbeobachtungen mit präziser Sprache und subtiler Ironie.
Er lebt in Hamburg, schreibt Kurzgeschichten, Prosa und arbeitet an neuen literarischen Projekten.
Neben Lesungen in Bibliotheken und Literaturhäusern engagiert er sich für die Vermittlung von Sprache und Literatur im öffentlichen Raum.
</p>

---

## Lesungen

<p class="muted">Textstand: <span id="stand"></span></p>

<table id="lesungen">
  <thead>
    <tr>
      <th data-type="date">Datum</th>
      <th>Stadt</th>
      <th>Ort</th>
      <th>Titel</th>
      <th>Hinweis</th>
      <th>Link</th>
    </tr>
  </thead>
  <tbody></tbody>
</table>

<script>
// Textstand (dd.mm.yyyy)
(function(){
  const d=new Date(), dd=String(d.getDate()).padStart(2,'0'), mm=String(d.getMonth()+1).padStart(2,'0'), yyyy=d.getFullYear();
  const el=document.getElementById('stand'); if(el) el.textContent=`${dd}.${mm}.${yyyy}`;
})();

// CSV laden (kompatibel mit , und ;  + einfache Anführungszeichen-Unterstützung)
(async function(){
  try {
    const res = await fetch('lesungen.csv', {cache:'no-store'});
    if(!res.ok) throw new Error(`HTTP ${res.status}`);
    let text = await res.text();
    text = text.replace(/^\uFEFF/, ''); // BOM entfernen

    // Delimiter automatisch wählen
    const firstLine = text.split(/\r?\n/)[0] || '';
    const delim = (firstLine.split(';').length > firstLine.split(',').length) ? ';' : ',';

    // sehr einfache Parser-Variante: respektiert "..." Felder ohne Delimiterbruch
    const rows = [];
    const re = new RegExp(`\\s*(?:\"([^\"]*)\"|([^${delim}\\r\\n]*))\\s*(?:${delim}|\\r?\\n|$)`, 'g');
    let m, line = [];
    for (let i=0, s=text; (m = re.exec(s)); ) {
      const val = (m[1] ?? m[2] ?? '').trim();
      line.push(val);
      const end = m[0].endsWith('\n') || re.lastIndex === s.length;
      if (end) { rows.push(line); line = []; }
    }

    if(rows.length <= 1){ console.warn('CSV enthält keine Datensätze.'); return; }

    const [header, ...data] = rows;
    const tbody = document.querySelector('#lesungen tbody');

    const parseISO = s => { const [y,m,d]=s.trim().split('-').map(Number); return new Date(y,(m||1)-1,d||1); };
    const toDE = d => `${String(d.getDate()).padStart(2,'0')}.${String(d.getMonth()+1).padStart(2,'0')}.${d.getFullYear()}`;

    // nach Datum DESC (neueste oben)
    data.sort((a,b) => parseISO(b[0]) - parseISO(a[0]));

    for (const r of data) {
      if(!r[0]) continue; // leere Zeilen überspringen
      const dt = parseISO(r[0]);
      const tr = document.createElement('tr');
      const cells = [
        `<time datetime="${r[0]}" data-sort="${r[0]}">${isNaN(dt)? r[0] : toDE(dt)}</time>`,
        r[1]||'', r[2]||'', r[3]||'',
        r[4]? `<span class="muted">${r[4]}</span>` : '',
        r[5]? `<a href="${r[5]}" target="_blank" rel="noopener">Details</a>` : ''
      ];
      cells.forEach(c => { const td=document.createElement('td'); td.innerHTML=c; tr.appendChild(td); });
      tbody.appendChild(tr);
    }

    // Klicksortierung (Datum nutzt data-sort)
    const table = document.getElementById('lesungen');
    [...table.tHead.rows[0].cells].forEach((th, idx) => {
      let asc = idx===0 ? false : true; // Start: Datum absteigend
      th.addEventListener('click', () => {
        asc = !asc;
        const rowsArr = [...tbody.rows];
        rowsArr.sort((r1, r2) => {
          const key = row => idx===0
            ? (row.cells[0].querySelector('time')?.getAttribute('data-sort') || '')
            : row.cells[idx].textContent.trim();
          const a = key(r1), b = key(r2);
          if (idx===0) return (a.localeCompare(b)) * (asc ? 1 : -1);
          return a.localeCompare(b, 'de', {numeric:true, sensitivity:'base'}) * (asc ? 1 : -1);
        });
        rowsArr.forEach(r => tbody.appendChild(r));
      });
    });

  } catch (e) {
    console.error('Konnte lesungen.csv nicht laden:', e);
  }
})();
</script>
